from sqlmanager import SqlManager
from urllib.parse import urlparse
from collections import defaultdict
import pycountry
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import fnmatch


class DomainDataAnalyzer:

    def __init__(self):
        self.sqlmanager = SqlManager()
        self.data = []

    def get_alpha_2_country_code(self, country_name):
        # Try to get the country by name
        country = pycountry.countries.get(name=country_name)
        if country:
            return country.alpha_2

        # Try to get the country by official name
        country = pycountry.countries.get(official_name=country_name)
        if country:
            return country.alpha_2

        # If the country is already an alpha_2 code
        if pycountry.countries.get(alpha_2=country_name):
            return country_name

        # Default to 'Unknown'
        return 'Unknown'

    def fetch_and_process_data(self):
        self.data = self.sqlmanager.fetch_all_domains()

        # Dictionary to store merged data
        merged_data = defaultdict(
            lambda: {'counter': 0, 'country': set(), 'file_name': set()})

        for row in self.data:
            # Extract domain
            parsed_url = urlparse(row[0])
            domain = parsed_url.netloc.replace('www.', '')

            counter = row[1]
            countries = set(self.get_alpha_2_country_code(country.strip())
                            for country in row[2].split(','))
            files = set(row[3].split(','))

            # Update the data for the domain
            merged_data[domain]['counter'] += counter
            merged_data[domain]['country'].update(countries)
            merged_data[domain]['file_name'].update(files)

        print(len(merged_data))
        # Convert set to list for country and file_name, and prepare final data
        final_data = {domain: {'counter': data['counter'],
                               'country': list(data['country']),
                               'file_name': list(data['file_name'])}
                      for domain, data in merged_data.items()}

        return final_data


if __name__ == "__main__":
    ddn = DomainDataAnalyzer()
    data = ddn.fetch_and_process_data()

    print(len(data))
